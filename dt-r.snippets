# data.table
snippet dtkey "sort & set index for fast joins/filters"
	data.table::setkey(${1:DT}, ${2:col1}${3:, ${4:col2}})
	${0}

snippet dtorder "sort without changing key"
	data.table::setorder(${1:DT}, ${2:-col})
	${0}

snippet dtjinner "inner join: matches only"
	${1:DT1}[${2:DT2}, on = .(${3:key}), nomatch = 0]
	${0}

snippet dtjleft "left join: all from DT1, matching from DT2"
	${1:DT1}[${2:DT2}, on = .(${3:key})]
	${0}

snippet dtjnonequi "non-equi join: range-based matching"
	data.table::setkey(${1:DT2}, ${2:start}, ${3:end})
	${1:DT2}[${4:DT1}, on = .(${2:start} <= ${5:val}, ${3:end} >= ${5:val}), nomatch = 0]
	${0}

snippet dtjroll "rolling join: match by nearest previous (or next) time"
	data.table::setkey(${1:DT}, ${2:time})
	${1:DT}[${3:queryDT}, on = .(${2:time}), roll = ${4:TRUE}]
	${0}

snippet dtlike "pattern matching: %like%, %ilike%"
	${1:DT}[${2:col} %like% "${3:pattern}"]

snippet dtbetween
	${1:DT}[data.table::between(${2:col}, ${3:a}, ${4:b})]

snippet dtif "fast conditional assignment"
	${1:DT}[, ${4:newcol} := data.table::fifelse(${2:col} > ${3:thresh}, "${5:yes}", "${6:no}")]

snippet dtfcase "Fast vectorized case_when alternative"
	${1:DT}[, ${2:new_col} := data.table::fcase(
		${3:condition1}, ${4:value1},
		${5:condition2}, ${6:value2},
		default = ${7:default_value}
	)]
	${0}

snippet dtunique "fast distinct count"
	${1:DT}[, .(Unique = data.table::uniqueN(${2:col}))]

snippet dtcopy "deep copy & affected rows message"
	${1:copyDT} <- data.table::copy(${2:DT})
	${0}

snippet dtcj "cartesian product of vectors"
	${1:res} <- data.table::CJ(${2:v1}, ${3:v2}${4:, sorted = TRUE, unique = TRUE})
	${0}

snippet dttic "start timer"
  started.at <- proc.time()

snippet dttoc "stop timer"
  message("Finished in",data.table::timetaken(started.at),"\n")
