# Misc

snippet rr "Refactor"
	`%refactor%` <- refactor::`%refactor%`

## pak
snippet pakp "Pak install package"
	pak::pak("${1:package}")

snippet pakl "pak::local_deps() - Show dependencies of local package"
	pak::local_deps()

snippet pakle "pak::local_deps_explain() - Explain local dependency reasons"
	pak::local_deps_explain()

snippet pakid "pak::local_install_deps() - Install local package dependencies"
	pak::local_install_deps()


snippet function "Function skeleton with try catch and error print"
	${1:name} <- function(${2:input}) {
		tryCatch(
			expr = {
				${0}
				return(${3:output})
			},
			error = function(e){
				print(
				sprintf("An error occurred in ${1:name} at %s : %s",
				Sys.time(),
				e)
				)
			})
	}

snippet compilefunction "Compile function for speed"
	${1:compiled_fun} <- compiler::cmpfun(${2:fun_name})

snippet mm "Cache function"
	${1:function_to_cache} <- memoise::memoise(${1:function_to_cache})

# Prints output to cursor need to run with tab+shift
# !rnorm(5)<Shift-Tab>
snippet !
	`r eval(parse(text = "$$"))`

snippet lib
	library(${1:package})

snippet req
	require(${1:package})

snippet src
	source("${1:file.R}")

snippet ret
	return(${1:code})

snippet ts "Time stamp"
	`r paste("#", date(), "------------------------------\n")`

snippet mat
	matrix(${1:data}, nrow = ${2:rows}, ncol = ${3:cols})

snippet pretty "Pretty formatting - choose function"
	prettyunits::pretty_${1:bytes|num|ms|sec|dt|p_value|round|signif|color|colour}(${2:x}${3:, digits = 2})
	${0}

## btw
snippet btw "Describe R objects for LLM context"
	btw::btw(${1:object}, clipboard = FALSE)

# OOP

## R6
snippet r6
	${1:ClassName} <- R6::R6Class("${1:ClassName}",
		public = list(
			${2:field1} = ${3:default1},
			${4:field2} = ${5:default2},

			initialize = function(${6:arg1}, ${7:arg2} = ${8:default2}) {
			  stopifnot(is.${9:type1}(${6:arg1}), length(${6:arg1}) == 1)
			  stopifnot(is.${10:type2}(${7:arg2}), length(${7:arg2}) == 1)
			  self${11:\$}${2:field1} <- ${6:arg1}
			  self${12:\$}${4:field2} <- ${7:arg2}
			},

			print = function(...) {
			  cat("${1:ClassName}:\n")
			  cat("  ${2:field1}: ", self${13:\$}${2:field1}, "\n", sep = "")
			  cat("  ${4:field2}: ", self${14:\$}${4:field2}, "\n", sep = "")
			  invisible(self)
			}
		)
	)


# S3 Object-Oriented Programming Snippets for R
# ====================================================

## Core S3 Class Infrastructure
snippet s3new "S3 constructor function"
	new_${1:classname} <- function(${2:x = double()}, ${3:attr = character()}) {
		checkmate::assert_${4:double}(${2:x})
		checkmate::assert_${5:character}(${3:attr})
		
		structure(
			${2:x},
			class = "${1:classname}",
			${3:attr} = ${3:attr}
		)
	}

snippet s3helper "S3 helper function for user interface"
	${1:classname} <- function(${2:x}, ${3:attr}) {
		# Validation and coercion
		${2:x} <- as.${4:double}(${2:x})
		${3:attr} <- as.${5:character}(${3:attr})
		
		# Create object
		new_${1:classname}(${2:x}, ${3:attr})
	}

snippet s3valid "S3 validator function"
	validate_${1:classname} <- function(x) {
		values <- unclass(x)
		${2:attr} <- attr(x, "${2:attr}")
		
		if (!is.${3:double}(values)) {
			stop("${1:classname} values must be ${3:double}", call. = FALSE)
		}
		
		if (length(${2:attr}) != 1) {
			stop("${2:attr} must be length 1", call. = FALSE)
		}
		
		x
	}

## Generic Functions and Methods
snippet s3generic "Create S3 generic function"
	${1:method_name} <- function(x, ...) {
		UseMethod("${1:method_name}")
	}

snippet s3method "S3 method implementation"
	${1:method_name}.${2:classname} <- function(x, ${3:...}) {
		${0}
	}

snippet s3print "S3 print method"
	print.${1:classname} <- function(x, ...) {
		cat("${1:classname}:\n")
		cat("  Values: ", paste(x, collapse = ", "), "\n")
		cat("  ${2:Attribute}: ", attr(x, "${2:attr}"), "\n")
		invisible(x)
	}

snippet s3summary "S3 summary method"
	summary.${1:classname} <- function(object, ...) {
		structure(
			list(
				n = length(object),
				mean = mean(object, na.rm = TRUE),
				${2:attr} = attr(object, "${2:attr}")
			),
			class = "summary.${1:classname}"
		)
	}

snippet s3length "S3 length method"
	length.${1:classname} <- function(x) {
		length(unclass(x))
	}

snippet s3subset "S3 subset method with [.classname"
	`[.${1:classname}` <- function(x, i, ...) {
		new_${1:classname}(
			unclass(x)[i],
			attr(x, "${2:attr}")
		)
	}

snippet s3subset2 "S3 subset method with [[.classname"
	`[[.${1:classname}` <- function(x, i, ...) {
		unclass(x)[[i]]
	}

snippet s3combine "S3 combine method with c()"
	c.${1:classname} <- function(...) {
		objects <- list(...)
		if (!all(sapply(objects, inherits, "${1:classname}"))) {
			stop("All objects must be ${1:classname}", call. = FALSE)
		}
		
		values <- unlist(lapply(objects, unclass))
		${2:attr} <- attr(objects[[1]], "${2:attr}")
		
		new_${1:classname}(values, ${2:attr})
	}

## Mathematical Operations
snippet s3math "S3 mathematical operations"
	Math.${1:classname} <- function(x, ...) {
		new_${1:classname}(
			NextMethod(),
			attr(x, "${2:attr}")
		)
	}

snippet s3ops "S3 arithmetic operations"
	Ops.${1:classname} <- function(e1, e2) {
		if (inherits(e1, "${1:classname}") && inherits(e2, "${1:classname}")) {
			new_${1:classname}(
				NextMethod(),
				attr(e1, "${2:attr}")
			)
		} else {
			NextMethod()
		}
	}

## Testing and Validation
snippet s3is "S3 is.classname test function"
	is.${1:classname} <- function(x) {
		inherits(x, "${1:classname}")
	}

snippet s3as "S3 as.classname coercion function"
	as.${1:classname} <- function(x, ${2:attr} = "${3:default}") {
		UseMethod("as.${1:classname}")
	}
	
	as.${1:classname}.default <- function(x, ${2:attr} = "${3:default}") {
		${1:classname}(x, ${2:attr})
	}

## Complete S3 Class Template
snippet s3class "Complete S3 class with constructor, validator, and print"
	# Constructor
	new_${1:classname} <- function(${2:x = double()}, ${3:attr = character()}) {
		checkmate::assert_${4:double}(${2:x})
		checkmate::assert_${5:character}(${3:attr})
		
		structure(
			${2:x},
			class = "${1:classname}",
			${3:attr} = ${3:attr}
		)
	}
	
	# Helper
	${1:classname} <- function(${2:x}, ${3:attr}) {
		${2:x} <- as.${4:double}(${2:x})
		${3:attr} <- as.${5:character}(${3:attr})
		
		validate_${1:classname}(new_${1:classname}(${2:x}, ${3:attr}))
	}
	
	# Validator
	validate_${1:classname} <- function(x) {
		values <- unclass(x)
		${3:attr} <- attr(x, "${3:attr}")
		
		if (!is.${4:double}(values)) {
			stop("${1:classname} values must be ${4:double}", call. = FALSE)
		}
		
		x
	}
	
	# Print method
	print.${1:classname} <- function(x, ...) {
		cat("${1:classname}:\n")
		cat("  Values: ", paste(x, collapse = ", "), "\n")
		cat("  ${3:Attribute}: ", attr(x, "${3:attr}"), "\n")
		invisible(x)
	}
	
	# Test function
	is.${1:classname} <- function(x) {
		inherits(x, "${1:classname}")
	}

## Package Development Integration
snippet s3export "S3 method export for NAMESPACE"
	#' @export
	${1:method_name}.${2:classname} <- function(x, ...) {
		${0}
	}

snippet s3roxygen "Complete roxygen2 documentation for S3 method"
	#' ${1:Method description}
	#'
	#' @param x A \code{${2:classname}} object
	#' @param ... Additional arguments
	#' @return ${3:Return description}
	#' @examples
	#' ${4:example_code}
	#' @export
	${5:method_name}.${2:classname} <- function(x, ...) {
		${0}
	}

## Advanced S3 Patterns
snippet s3inherit "S3 class inheritance"
	new_${1:subclass} <- function(${2:x}, ${3:attr}, ${4:subattr}) {
		obj <- new_${5:parentclass}(${2:x}, ${3:attr})
		structure(
			obj,
			class = c("${1:subclass}", class(obj)),
			${4:subattr} = ${4:subattr}
		)
	}

snippet s3nexmethod "S3 method using NextMethod()"
	${1:method_name}.${2:classname} <- function(x, ${3:arg}, ...) {
		# Pre-processing
		${4:preprocessing_code}
		
		# Call parent method
		result <- NextMethod()
		
		# Post-processing
		${5:postprocessing_code}
		
		result
	}

snippet s3group "S3 group generic methods"
	Summary.${1:classname} <- function(..., na.rm = FALSE) {
		objects <- list(...)
		values <- unlist(lapply(objects, unclass))
		
		switch(.Generic,
			"sum" = sum(values, na.rm = na.rm),
			"mean" = mean(values, na.rm = na.rm),
			"max" = max(values, na.rm = na.rm),
			"min" = min(values, na.rm = na.rm),
			stop("Function not defined for ${1:classname} objects")
		)
	}

# Conditionals

snippet if
	if (${1:condition}) {
		${0}
	}

snippet el
	else {
		${0}
	}

snippet ei
	else if (${1:condition}) {
		${0}
	}

# Loops

snippet for
	for (${1:variable} in seq_along(${2:vector})) {
		${0}
	}

snippet while
	while (${1:condition}) {
		${0}
	}

snippet switch
	switch (${1:object},
		${2:case} = ${3:action}
	)


# Shiny

snippet shinyapp
	library(shiny)

	ui <- fluidPage(
	  ${0}
	)

	server <- function(input, output, session) {

	}

	shinyApp(ui, server)

snippet shinymod
	${1:name}UI <- function(id) {
	  ns <- NS(id)
	  tagList(
		${0}
	  )
	}

	${1:name}Server <- function(id) {
	  moduleServer(
	    id,
	    function(input, output, session) {

	    }
	  )
	}

snippet context "Export complete package as text file"
	pkglite::collate(
		".",
		pkglite::file_default()
		) |>
	pkglite::pack()


snippet jadorn "Adorn tabyl with percentages and totals"
	janitor::tabyl(${1:data}, ${2:col1}${3:, ${4:col2}}) |>
		janitor::adorn_totals("${5:row}") |>
		janitor::adorn_percentages("${6:row}") |>
		janitor::adorn_pct_formatting(digits = ${7:1}) |>
		janitor::adorn_ns()


