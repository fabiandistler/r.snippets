# cachem R Package - RStudio Snippets
# Intelligent key-value caching with automatic pruning
# ─────────────────────────────────────────────────────

# Memory Cache Creation
snippet cachemem "Create memory cache"
	${1:cache} <- cachem::cache_mem(
		max_size = ${2:100 * 1024^2},  # 100MB
		max_age = ${3:3600},           # 1 hour
		max_n = ${4:Inf}               # unlimited objects
	)

# Disk Cache Creation
snippet cachedisk "Create disk cache"
	${1:cache} <- cachem::cache_disk(
		dir = "${2:./cache}",
		max_size = ${3:500 * 1024^2},  # 500MB
		max_age = ${4:86400},          # 1 day
		max_n = ${5:Inf}
	)

# Cache Operations
snippet cacheset "Set cache value"
	${1:cache}$set("${2:key}", ${3:value})

snippet cacheget "Get cache value"
	${1:result} <- ${2:cache}$get("${3:key}")

snippet cacheget_missing "Get with missing value handling"
	${1:result} <- ${2:cache}$get("${3:key}")
	if (inherits(${1:result}, "key_missing")) {
		${1:result} <- ${4:default_value}
	}

snippet cacheexists "Check if key exists"
	if (${1:cache}$exists("${2:key}")) {
		${3:# Key exists}
	}

snippet cacheremove "Remove cache key"
	${1:cache}$remove("${2:key}")

snippet cachereset "Reset entire cache"
	${1:cache}$reset()

snippet cacheprune "Manual cache pruning"
	${1:cache}$prune()

# Cache Information
snippet cacheinfo "Cache information"
	${1:info} <- ${2:cache}$info()
	cat("Objects:", ${1:info}$n, "\n")
	cat("Size:", format(${1:info}$size, units = "MB"), "\n")

snippet cachesize "Cache size info"
	cat("Cache objects:", ${1:cache}$size(), "\n")

snippet cachekeys "List cache keys"
	${1:keys} <- ${2:cache}$keys()

# Advanced Patterns

snippet cachedt "data.table with caching"
	${1:cached_analysis} <- function(${2:dt}, ${3:groupvar}) {
		key <- paste0("analysis_", digest::digest(list(${2:dt}, ${3:groupvar})))
		
		result <- ${4:cache}$get(key)
		if (inherits(result, "key_missing")) {
			result <- ${2:dt}[, .(
				mean_val = mean(${5:value_col}, na.rm = TRUE),
				count = .N
			), by = ${3:groupvar}]
			${4:cache}$set(key, result)
		}
		
		return(result)
	}

snippet cachewrapper "Generic cache wrapper function"
	cache_wrapper <- function(func, cache, ...) {
		args <- list(...)
		key <- digest::digest(args)
		
		result <- cache$get(key)
		if (inherits(result, "key_missing")) {
			result <- do.call(func, args)
			cache$set(key, result)
		}
		
		return(result)
	}

# Performance Monitoring
snippet cachestats "Cache performance stats"
	stats <- ${1:cache}$info()
	cat("Cache Statistics:\n")
	cat("  Objects:", stats$n, "\n")
	cat("  Size:", format(stats$size, units = "auto"), "\n")
	if (!is.null(stats$hit_rate)) {
		cat("  Hit Rate:", round(stats$hit_rate * 100, 2), "%\n")
	}
 
# Cache Invalidation
snippet cacheinval "Cache invalidation by pattern"
	invalidate_pattern <- function(cache, pattern) {
		keys <- cache$keys()
		matching_keys <- keys[grepl(pattern, keys)]
		
		for (key in matching_keys) {
			cache$remove(key)
		}
		
		cat("Invalidated", length(matching_keys), "keys\n")
	}


