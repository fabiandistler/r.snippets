# purrr Functional Programming Snippets

## Map Family (Core Functions)
snippet purmap2 "Apply function to pairs from two vectors"
	purrr::map2(${1:x}, ${2:y}, ${3:~.x})

snippet purpmap "Apply function to multiple vectors"
	purrr::pmap(list(${1:x}, ${2:y}, ${3:z}), ${4:function(...)})


## Map Variants (Conditional and Selective)
snippet purmapif "Apply function conditionally where predicate is TRUE"
	purrr::map_if(${1:x}, ${2:is.numeric}, ${3:~.x * 2})

snippet purmapat "Apply function at specific positions"
	purrr::map_at(${1:x}, ${2:c(1, 3)}, ${3:~.x^2})

snippet purmod "Modify list in place"
	purrr::modify(${1:x}, ${2:~.x})

snippet purmodif "Modify conditionally in place"
	purrr::modify_if(${1:x}, ${2:is.numeric}, ${3:~round(.x, 2)})

snippet purmodat "Modify at specific positions in place"
	purrr::modify_at(${1:x}, ${2:c("col1", "col2")}, ${3:as.factor})

## Walk Functions (Side Effects)
snippet purwalk "Apply function for side effects"
	purrr::walk(${1:x}, ${2:print})

snippet purwalk2 "Apply function to pairs for side effects"
	purrr::walk2(${1:x}, ${2:y}, ${3:~cat(.x, ":", .y, "\n")})

snippet purpwalk "Apply function to multiple inputs for side effects"
	purrr::pwalk(list(${1:x}, ${2:y}), ${3:function(a, b) cat(a, b, "\n")})


## Predicate Functions
snippet purkeep "Keep elements matching predicate"
	purrr::keep(${1:x}, ${2:is.numeric})

snippet purdiscard "Remove elements matching predicate"
	purrr::discard(${1:x}, ${2:is.na})

snippet purcompact "Remove NULL and empty elements"
	purrr::compact(${1:x})

## Reduce Functions
snippet purreduce "Combine elements with binary function"
	purrr::reduce(${1:x}, ${2:`+`})

## List Manipulation
snippet purflatten "Flatten one level of list hierarchy"
	purrr::flatten(${1:x})

## Advanced Functional Programming
snippet purcompose "Compose multiple functions"
	purrr::compose(${1:fun1}, ${2:fun2}, ${3:fun3})

snippet purpossibly "Safely handle errors with default value"
	purrr::possibly(${1:function}, ${2:otherwise = NA})

snippet purquietly "Capture output, messages, warnings"
	purrr::quietly(${1:function})(${2:args})

snippet pursafely "Capture errors without stopping"
	purrr::safely(${1:function})(${2:args})

snippet purautobrowse "Debug function automatically on error"
	purrr::auto_browse(${1:function})

## Plucking and Extracting
snippet purpluck "Extract element by position or name"
	purrr::pluck(${1:x}, ${2:1}, ${3:"name"})

snippet purchuck "Extract element (error if missing)"
	purrr::chuck(${1:x}, ${2:"name"})

## Error Handling Patterns
snippet purtrysafely "Safe operation with error capture"
	${1:safe_fun} <- purrr::safely(${2:risky_function})
	${3:results} <- purrr::map(${4:inputs}, ${1:safe_fun})
	${5:errors} <- purrr::transpose(${3:results})$error
	${6:successes} <- purrr::transpose(${3:results})$result

