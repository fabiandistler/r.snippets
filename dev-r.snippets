# Package dev

snippet aa "Update DESCRIPTION"
	attachment::att_amend_desc()

snippet ll "lint current file"
	lintr:::addin_lint()

snippet ff
	flir::fix(path = rstudioapi::getSourceEditorContext()\$path)

## Handlers
snippet message
	cli::cli_inform("${1:message}", call = NULL)

snippet progress
	${1:dt}[, {
		for (i in cli::cli_progress_along(.I)) {
			${2:# Code for .SD[i] or .I[i]}
		}
	}, by = ${3:grp}]


## Plotters
snippet pc "Network plot of package"
	pkgnet::CreatePackageReport("${1:package}")

snippet pd "Package deps"
	library("${1:package}")
	pkgdepR::deps("${1:package}") |>
		plot()

snippet fv "UML of function"
	flow::flow_view(${1:function})

snippet fd "Who is using function"
	flow::flow_view_deps(${1:function})

## renv
snippet rs "Renv status"
	renv::status()

## testthat
snippet tt "Create test"
	test_that("${1:description}", {
	  $0
	})

snippet td "Describe that"
	describe("${1:function}", {
	  it("${2:action}", {
	    $0
	  })
	})

snippet tc
	devtools::test_coverage_active_file()

snippet tmock
	testthat::local_mocked_bindings()

### xpectr
snippet xf "Generate testthat tests for function arguments"
	xpectr::gxs_function(
		fn = ${1:function_name},
		args_values = list(
			"${2:arg1}" = list(${3:value1, value2}),
			"${4:arg2}" = list(${5:value1, value2})
		),
		indentation = 2,
		copy_env = FALSE
	)

snippet xc "Capture and test side effects (errors/warnings/messages)"
	side_effects_${1:12345} <- xpectr::capture_side_effects(
		${2:expression},
		reset_seed = TRUE
	)
	expect_equal(
		xpectr::strip(side_effects_${1:12345}[['warnings']]),
		xpectr::strip(${3:"expected warning"}),
		fixed = TRUE
	)
	expect_equal(
		xpectr::strip(side_effects_${1:12345}[['messages']]),
		xpectr::strip(${4:"expected message"}),
		fixed = TRUE
	)

snippet xs "Suppress warnings/messages and test clean output"
	output_${1:12345} <- xpectr::suppress_mw(${2:expression})
	expect_equal(
		output_${1:12345},
		${3:expected_output},
		${4:tolerance = 1e-4}
	)


## benchmarking
snippet mm "Benchmark expressions"
	microbenchmark::microbenchmark(${1:expression1}, ${2:expression2})

## assertions
snippet assert_int
	checkmate::assert_int(${1:x})

snippet assert_double
	checkmate::assert_double(${1:x}, any.missing = FALSE, all.missing = FALSE)

snippet assert_character
	checkmate::assert_character(${1:x}, any.missing = FALSE, all.missing = FALSE)

snippet assert_logical
	checkmate::assert_logical(${1:x}, any.missing = FALSE, all.missing = FALSE)

snippet assert_data_table
	checkmate::assert_data_table(${1:x}, any.missing = FALSE, all.missing = FALSE)

snippet assert_list
	checkmate::assert_list(${1:x}, any.missing = FALSE, all.missing = FALSE)

snippet assert_function
	checkmate::assert_function(${1:x})

snippet assert_choice
	checkmate::assert_choice(${1:x}, choices = c(${2:"option1"}, ${3:"option2"}))

snippet assert_subset
	checkmate::assert_subset(${1:x}, choices = c(${2:"option1"}, ${3:"option2"}))

snippet assert_file_exists
	checkmate::assert_file_exists(${1:"/path/to/file"})

snippet assert_directory_exists
	checkmate::assert_directory_exists(${1:"/path/to/directory"})

snippet qassert "Compact assertion using format string syntax"
	checkmate::qassert(${1:x}, "${2:format-string}")


# lifecycle package snippets
# ─────────────────────────────────────────────────────────────

# Function deprecation
snippet lcdep "Deprecate function with lifecycle"
	lifecycle::deprecate_warn(
		when = "${1:1.0.0}",
		what = "${2:function_name()}",
		with = "${3:new_function()}"
	)
	${0}

snippet lcsoft "Deprecate function with soft warning"
	lifecycle::deprecate_soft(
		when = "${1:1.0.0}",
		what = "${2:function_name()}",
		with = "${3:new_function()}"
	)
	${0}

snippet lcstop "Stop function with lifecycle error"
	lifecycle::deprecate_stop(
		when = "${1:1.0.0}",
		what = "${2:function_name()}",
		with = "${3:new_function()}"
	)
	${0}

# Argument deprecation
snippet lcarg "Deprecate function argument"
	if (!lifecycle::is_present(${1:arg})) {
		lifecycle::deprecate_warn(
			when = "${2:1.0.0}",
			what = "${3:function_name()}(${1:arg})",
			with = "${4:function_name()}(${5:new_arg})"
		)
	}
	${0}

snippet lcreq "Require present argument"
	if (!lifecycle::is_present(${1:arg})) {
		lifecycle::deprecate_stop(
			when = "${2:1.0.0}",
			what = "${3:function_name()}(${1:arg})"
		)
	}
	${0}

# Badge documentation
snippet lcbadge "Add lifecycle badge to function docs"
	#' @lifecycle ${1:experimental}
	${0}

snippet lcparam "Add lifecycle to parameter docs"
	#' @param ${1:arg} ${2:Description} `r lifecycle::badge("${3:deprecated}")`
	${0}

# Feature lifecycle
snippet lcexp "Mark function as experimental"
	lifecycle::signal_stage("experimental", "${1:function_name()}")
	${0}

snippet lcstable "Mark function as stable"
	lifecycle::signal_stage("stable", "${1:function_name()}")
	${0}

snippet lcsup "Mark function as superseded"
	lifecycle::signal_stage("superseded", "${1:function_name()}")
	${0}


# Conditional deprecation
snippet lccond "Conditional deprecation warning"
	if (${1:condition}) {
		lifecycle::deprecate_warn(
			when = "${2:1.0.0}",
			what = "${3:function_name()}(${4:arg})",
			details = "${5:Additional context}"
		)
	}
	${0}

# Advanced deprecation patterns
snippet lcmsg "Custom deprecation message"
	lifecycle::deprecate_warn(
		when = "${1:1.0.0}",
		what = "${2:function_name()}",
		details = c(
			"${3:Additional context}",
			"${4:More details}"
		)
	)
	${0}

snippet lcrename "Function rename deprecation"
	# In old function
	lifecycle::deprecate_warn(
		when = "${1:1.0.0}",
		what = "${2:old_function()}",
		with = "${3:new_function()}"
	)
	${3:new_function}(${4:...})
	${0}

snippet lcdata "Deprecate dataset"
	lifecycle::deprecate_warn(
		when = "${1:1.0.0}",
		what = "${2:dataset}",
		details = "Use `${3:new_dataset}` instead."
	)
	${0}

# Testing lifecycle
snippet lctest "Test deprecated function"
	lifecycle::local_options(lifecycle_verbosity = "quiet")
	expect_warning(
		${1:deprecated_function()},
		class = "lifecycle_warning_deprecated"
	)
	${0}

snippet lctestno "Test no deprecation warning"
	lifecycle::local_options(lifecycle_verbosity = "quiet")
	expect_no_warning(${1:function_call()})
	${0}

# Documentation helpers
snippet lcinherit "Inherit lifecycle badge"
	#' @inheritParams ${1:function_name}
	#' @inherit ${1:function_name} return
	${0}

snippet lcdetails "Add lifecycle details section"
	#' @section Lifecycle:
	#' ${1:This function is experimental and the interface may change.}
	${0}
