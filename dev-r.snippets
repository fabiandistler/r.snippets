# Package dev

snippet aa "Update DESCRIPTION"
	attachment::att_amend_desc()

snippet ll "lint current file"
	lintr:::addin_lint()

snippet ff
	flir::fix(path = rstudioapi::getSourceEditorContext()\$path)

## Plotters
snippet plotnet "Network plot of package"
	pkgnet::CreatePackageReport("${1:package}")

snippet plotpkgdeps "Package deps"
	library("${1:package}")
	pkgdepR::deps("${1:package}") |>
		plot()

snippet flowv "UML of function"
	flow::flow_view(${1:function})

snippet flowdeps "Who is using function"
	flow::flow_view_uses(${1:function})

## renv
snippet rs "Renv status"
	renv::status()

## testthat
snippet tt "Create test"
	test_that("${1:description}", {
	  $0
	})

snippet td "Describe that"
	describe("${1:function}", {
	  it("${2:action}", {
	    $0
	  })
	})

snippet tc
	devtools::test_coverage_active_file()


### xpectr
snippet xf "Generate testthat tests for function arguments"
	xpectr::gxs_function(
		fn = ${1:function_name},
		args_values = list(
			"${2:arg1}" = list(${3:value1, value2}),
			"${4:arg2}" = list(${5:value1, value2})
		),
		indentation = 2,
		copy_env = FALSE
	)


## benchmarking
snippet mm "Benchmark expressions"
	microbenchmark::microbenchmark(${1:expression1}, ${2:expression2})

## assertions
snippet assert_int
	checkmate::assert_int(${1:x})

snippet assert_double
	checkmate::assert_double(${1:x}, any.missing = FALSE, all.missing = FALSE)

snippet assert_character
	checkmate::assert_character(${1:x}, any.missing = FALSE, all.missing = FALSE)

snippet assert_string
	checkmate::assert_string(${1:x})

snippet assert_logical
	checkmate::assert_logical(${1:x}, any.missing = FALSE, all.missing = FALSE)

snippet assert_data_table
	checkmate::assert_data_table(${1:x}, any.missing = FALSE, all.missing = FALSE)

snippet assert_list
	checkmate::assert_list(${1:x}, any.missing = FALSE, all.missing = FALSE)

snippet assert_function
	checkmate::assert_function(${1:x})

snippet assert_choice
	checkmate::assert_choice(${1:x}, choices = c(${2:"option1"}, ${3:"option2"}))

snippet assert_subset
	checkmate::assert_subset(${1:x}, choices = c(${2:"option1"}, ${3:"option2"}))

snippet assert_file_exists
	checkmate::assert_file_exists(${1:"/path/to/file"})

snippet assert_directory_exists
	checkmate::assert_directory_exists(${1:"/path/to/directory"})


# lifecycle package snippets
# ─────────────────────────────────────────────────────────────

# Function deprecation
snippet lcdep "Deprecate function with lifecycle"
	lifecycle::deprecate_warn(
		when = "${1:1.0.0}",
		what = "${2:function_name()}",
		with = "${3:new_function()}"
	)
	${0}

snippet lcsoft "Deprecate function with soft warning"
	lifecycle::deprecate_soft(
		when = "${1:1.0.0}",
		what = "${2:function_name()}",
		with = "${3:new_function()}"
	)
	${0}

snippet lcstop "Stop function with lifecycle error"
	lifecycle::deprecate_stop(
		when = "${1:1.0.0}",
		what = "${2:function_name()}",
		with = "${3:new_function()}"
	)
	${0}

# Argument deprecation
snippet lcarg "Deprecate function argument"
	if (!lifecycle::is_present(${1:arg})) {
		lifecycle::deprecate_warn(
			when = "${2:1.0.0}",
			what = "${3:function_name()}(${1:arg})",
			with = "${4:function_name()}(${5:new_arg})"
		)
	}
	${0}

snippet lcparam "Add lifecycle to parameter docs"
	#' @param ${1:arg} ${2:Description} `r lifecycle::badge("${3:deprecated}")`
	${0}

# Feature lifecycle
snippet lcexp "Mark function as experimental"
	lifecycle::signal_stage("experimental", "${1:function_name()}")
	${0}

snippet lcsup "Mark function as superseded"
	lifecycle::signal_stage("superseded", "${1:function_name()}")
	${0}

# R Error Handling Snippets

snippet trycatch "Basic tryCatch with error handling"
	tryCatch(
		expr = {
			${1:# Code that might fail}
		},
		error = function(e) {
			${2:# Handle error}
			message("Error: ", e$message)
			${3:return(NULL)}
		}
	)


snippet trychain "Chain multiple tryCatch attempts"
	result <- tryCatch(
		expr = {
			${1:# Primary method}
		},
		error = function(e1) {
			tryCatch(
				expr = {
					${2:# Fallback method}
				},
				error = function(e2) {
					${3:# Final fallback or error}
					stop("All methods failed. Primary: ", e1$message, ". Fallback: ", e2$message)
				}
			)
		}
	)


